{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["totalBoardRows","totalBoardColumns","myNewBoardStatus","cellStatus","Math","random","grid","r","c","BoardGrid","boardStatus","onToggleCellStatus","tr","td","push","className","onClick","handleClick","Slider","speed","onSpeedChange","type","min","max","step","value","onChange","e","target","App","state","generation","isGameRunning","runStopButton","handleStop","handleRun","handleClearBoard","setState","handleNewBoard","handleToggleCellStatus","toggleBoardStatus","prevState","clonedBoardStatus","JSON","parse","stringify","handleStep","nextStep","amountTrueNeighbours","reduce","trueNeighbours","neighbour","x","y","totalTrueNeighbours","handleSpeedChange","myNewSpeed","prevProps","this","speedChanged","gameStarted","gameStopped","clearInterval","timerID","setInterval","disabled","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1d8801f0.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\n// Set Board Rows and Columns\nconst totalBoardRows = 50;\nconst totalBoardColumns = 50;\n\n// Set Up Board Status\nconst myNewBoardStatus = (cellStatus = () => Math.random() < 0.3) => {\n  const grid = [];\n  for (let r=0; r< totalBoardRows; r++) {\n    grid[r] = [];\n    for (let c=0; c < totalBoardColumns; c++) {\n      grid[r][c] = cellStatus;\n    }\n  }\n  return grid;\n};\n\n// Set Up Board Grid\nconst BoardGrid = ({boardStatus, onToggleCellStatus}) => {\n  const handleClick = (r,c) => onToggleCellStatus(r,c);\n  const tr = [];\n  for (let r=0; r< totalBoardRows; r++) {\n    const td= [];\n    for (let c=0; c < totalBoardColumns; c++) {\n      td.push(<td key={`${r},${c}`} className={boardStatus[r][c] ? 'alive' : 'dead'} onClick={() => handleClick(r,c)} />);\n    }\n    tr.push(<tr key={r}>{td}</tr>);\n  }\n  return <table><tbody>{tr}</tbody></table>;\n};\n\n// Set Up Slider\nconst Slider = ({speed, onSpeedChange}) => {\n  const handleChange = e => onSpeedChange(e.target.value);\n  return (\n    <input \n      type='range'\n      min='50'\n      max='1000'\n      step='50'\n      value={speed}\n      onChange={handleChange} />\n  );\n};\n\n// Set Up App Class\nclass App extends Component {\n  state = {\n    boardStatus: myNewBoardStatus(),\n    generation: 0,\n    isGameRunning: false,\n    speed: 500\n  };\n\n  runStopButton = () => {\n    return this.state.isGameRunning ? <button type='button' onClick={this.handleStop}>Stop</button> : <button type='button' onClick={this.handleRun}>Start</button>;\n  }\n\n  handleClearBoard = () => {\n    this.setState({\n      boardStatus: myNewBoardStatus(() => false),\n      generation: 0\n    });\n  }\n\n  handleNewBoard = () => {\n    this.setState({\n      boardStatus: myNewBoardStatus(),\n      generation: 0\n    });\n  }\n\n  handleToggleCellStatus = (r,c) => {\n    const toggleBoardStatus = prevState => {\n      const clonedBoardStatus = JSON.parse(JSON.stringify(prevState.boardStatus));\n      clonedBoardStatus[r][c] = !clonedBoardStatus[r][c];\n      return clonedBoardStatus;\n    };\n\n    this.setState(prevState => ({\n      boardStatus: toggleBoardStatus(prevState)\n    }));\n  }\n\n  handleStep = () => {\n    const nextStep = prevState => {\n      const boardStatus = prevState.boardStatus;\n      // Deep Clone boardStatus\n      const clonedBoardStatus = JSON.parse(JSON.stringify(boardStatus));\n      const amountTrueNeighbours = (r,c) => {\n        const neighbours = [[-1,-1],[-1,0],[-1,1],[0,1],[1,1],[1,0],[1,-1],[0,-1]];\n        return neighbours.reduce((trueNeighbours, neighbour) => {\n          const x = r + neighbour[0];\n          const y = c + neighbour[1];\n          const isNeighbourOnBoard = (x >=0 && x < totalBoardRows && y >=0 && y < totalBoardColumns);\n          // No need to count more than 4 alive neighbours due to rules\n          if (trueNeighbours < 4 && isNeighbourOnBoard && boardStatus[x][y]) {\n            return trueNeighbours + 1;\n          } else {\n            return trueNeighbours;\n          }\n        },0);\n      };\n      \n      for (let r=0;r < totalBoardRows; r++) {\n        for (let c=0;c < totalBoardColumns; c++) {\n          const totalTrueNeighbours = amountTrueNeighbours(r,c);\n          if (!boardStatus[r][c]) {\n            if (totalTrueNeighbours === 3) clonedBoardStatus[r][c] = true;\n          } else {\n            if (totalTrueNeighbours < 2 || totalTrueNeighbours > 3) clonedBoardStatus[r][c] = false;\n          }\n        }\n      }\n      return clonedBoardStatus;\n    };\n\n    this.setState(prevState => ({\n      boardStatus: nextStep(prevState),\n      generation: prevState.generation + 1\n    }));\n  }\n\n  handleSpeedChange = myNewSpeed => {\n    this.setState({speed: myNewSpeed});\n  }\n\n  handleRun = () => {\n    this.setState({isGameRunning: true});\n  }\n\n  handleStop = () => {\n    this.setState({isGameRunning: false});\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { isGameRunning, speed } = this.state;\n    const speedChanged = prevState.speed !== speed;\n    const gameStarted = !prevState.isGameRunning && isGameRunning;\n    const gameStopped = prevState.isGameRunning && !isGameRunning;\n\n    if ((isGameRunning && speedChanged) || gameStopped) {\n      clearInterval(this.timerID);\n    }\n\n    if ((isGameRunning && speedChanged) || gameStarted) {\n      this.timerID = setInterval(() => {\n        this.handleStep();\n      },speed);\n    }\n  }\n\n  render() {\n    const { boardStatus, isGameRunning, generation, speed } = this.state;\n    return(\n      <div>\n        <h1>Game of Life</h1>\n        <BoardGrid boardStatus={boardStatus} onToggleCellStatus={this.handleToggleCellStatus} />\n        <div className='flexRow upperControls'>\n          <span>\n            {'+ '}\n            <Slider speed={speed} onSpeedChange={this.handleSpeedChange} />\n            {' -'}\n          </span>\n          {`Generation: ${generation}`}\n        </div>\n        <div className='flexRow lowerControls'>\n          {this.runStopButton()}\n          <button type='button' disabled={isGameRunning} onClick={this.handleStep}>Step</button>\n          <button type='button'onClick={this.handleClearBoard}>Clear Board</button>\n          <button type='button' onClick={this.handleNewBoard}>New Board</button>\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}